@model TrackingProject.WebSite.Models.RouteViewModel
@{
    ViewBag.Title = "Rota Düzenle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="content-header">
    <h1>
        Planlama
        <small>Rota Düzenle</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="/Home/Index"><i class="fa fa-dashboard"></i> Anasayfa</a></li>
        <li class="active">Rota Düzenle</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Rota Düzenle</h3>
                </div>

                <form id="Route" role="form" action="/Route/Edit" method="post">
                    @Html.HiddenFor(i => i.Id)
                    @Html.HiddenFor(i=>i.LocationPoint)

                    <div class="box-body">
                        <div class="form-group">
                            <label>Firmalar</label>
                            @Html.DropDownListFor(i => i.FirmId, Model.Firms, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            <label>Sürücüler</label>
                            @Html.DropDownListFor(i => i.DriverId, Model.Drivers, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            <label>Rota Tipi</label>
                            <select id="RouteType" name="RouteType" class="form-control">
                                <option value="0" @(Model.RouteType == 0 ? "selected" : "")>Binme</option>
                                <option value="1" @(Model.RouteType == 1 ? "selected" : "")>İnme</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Başlangıç Saati</label><div class="bootstrap-timepicker">
                                @Html.TextBoxFor(m => m.StartTime, new { Class = "form-control timepicker" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Açıklama</label>
                            @Html.TextBoxFor(m => m.Name, new { placeholder = "Ad", Class = "form-control" })
                        </div>
                        <div class="form-group" id="Partial">
                            @*@Html.RenderPartial("GetStudents", new { FirmId = Model.FirmId })*@

                        </div>
                        <div class="form-group">
                            <div style="height:400px;">
                                <div id="map" style="height:100%;"></div>
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(i => i.SaveStudents)

                    <div class="box-footer">
                        <button id="btnSave" type="submit" class="btn btn-primary">Kaydet</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
@section scripts{
    <link rel="stylesheet" href="~/plugins/timepicker/bootstrap-timepicker.min.css">
    <script src="~/plugins/timepicker/bootstrap-timepicker.min.js"></script>
    <script>

        $(document).ready(function ($) {
            $('.timepicker').timepicker({
                showInputs: false, showMeridian: false, minuteStep: 5
            });
            $('#Route').formValidation({
                framework: "bootstrap4",
                button: {
                    selector: '#btnSave',
                    disabled: 'disabled'
                },
                locale: 'tr_TR',
                icon: null,
                fields: {
                    "Name": {
                        validators: {
                            notEmpty: {
                            }
                        }
                    },
                    "FirmId": {
                        validators: {
                            notEmpty: {
                            }
                        }
                    },
                    "DriverId": {
                        validators: {
                            notEmpty: {
                            }
                        }
                    },
                },
                err: {
                    clazz: 'has-error'
                },
                row: {
                    invalid: 'has-error',
                    valid: 'has-success'
                }
            });

        });
    </script>
    <!--Firma Seç-->
    <script>
        $(document).ready(function ($) {
            //Sayfa Açılırken
            GetStudents();

            $('#FirmId').change(function () {
                $('#DriverId').empty();
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("GetDriver", "Route")',
                    datatype: "Json",
                    data: { FirmId: $('#FirmId').val() },
                    success: function (result) {
                        $('#DriverId').empty();
                        $.each(result.data, function (index, value) {
                            $('#DriverId').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                        });
                    },
                    beforeSend: function () {

                    },
                    complete: function () {

                    }
                        ,
                    error: function (xhr, status, err) {
                        if (xhr.status === 999) {
                            noAuthorize(this.url);
                        } else {

                        }
                    }
                });
                //Seçim Değişince
                GetStudents();
            });

            function GetStudents() {
                $.ajax({
                    type: "GET",
                    dataType: "html",
                    url: '@Url.Action("GetStudents", "Route")',//'/Adres/TesisatBilgileri',
                    data: { FirmId: $('#FirmId').val(), RouteId: $('#Id').val() },
                    async: true,
                    success: function (result) {
                        $('#Partial').html("");
                        $('#Partial').html(result);
                    },
                    beforeSend: function () {
                        $('#Partial').html("<div class='callout callout-info'><p>Öğrenci Listesi Yükleniyor</p></div>");
                    },
                    complete: function () {
                    },
                    error: function (xhr, status, err) {
                        if (xhr.status === 999) {
                            noAuthorize(this.url);
                        } else {
                            $('#Partial').html("<div class='callout callout-danger'><p>Öğrenci Listesi Yüklenemedi!</p></div>");
                        }
                    }
                });
            }
        });
    </script>

<script>
        var map;
        var markers = [];
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: @Model.LocationPoint.Split(':')[0], lng: @Model.LocationPoint.Split(':')[1] },
                zoom: 8
            });
            //google.maps.event.addListener(map, 'click', function (event) {
            //    alert(event.latLng.lat());
            //});

            var myLatLng = { lat: @Model.LocationPoint.Split(':')[0], lng: @Model.LocationPoint.Split(':')[1] };
            //var marker = new google.maps.Marker({
            //    position: myLatLng,
            //    map: map,
            //});
            addMarker(myLatLng) ;

            map.addListener('click', function (event) {
                deleteMarkers();
                addMarker(event.latLng);
                $('#LocationPoint').val(event.latLng.lat() + ':' + event.latLng.lng());
            });
        }
        function addMarker(location) {
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
            markers.push(marker);
        }
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }
        function clearMarkers() {
            setMapOnAll(null);
        }
        function deleteMarkers() {
            clearMarkers();
            markers = [];
        }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNtbdI53OKv5IOmazepe-NKpF1GDxR1aY&callback=initMap"
        async defer></script>
}


